{"version":3,"sources":["home/presentationcomponents/Tab.jsx","home/conditionalcomponenets/Tabs.jsx","home/presentationcomponents/TabElement.jsx","sharedmodules/CommonModal.jsx","home/conditionalcomponenets/TabDisplayController.jsx","App.js","reportWebVitals.js","index.js"],"names":["Tab","onClick","e","target","className","props","tabNum","closeTab","closeTabItem","this","activeTab","label","index","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","Component","Tabs","onClickTabItem","tab","setState","setActiveTab","showChevronAtTab","window","screen","availWidth","state","children","showChevronAtTabNumber","tabCount","firstTab","droppableId","direction","droppableProps","map","child","placeholder","lastTab","addNewTab","tabContent","TabElement","Modal","style","color","headerText","modalBody","confirmButton","marginRight","confirmButtonAction","confirmButtonText","closeButtonAction","closeButtonText","TabDisplayController","tabList","showModal","deleteTab","undefined","totalCount","tabState","createTabs","bind","confirmCloseTabItem","openModal","closeModal","getTabCount","getTotalCount","onDragEnd","isTabListEmpty","length","push","Object","keys","i","result","destination","source","sourceKey","destinationKey","tempObj","assign","dummy","existingOrder","newOrder","Array","from","splice","key","tabStateKeys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b995a696.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\n\r\n\r\nexport default class Tab extends React.Component {\r\n    onClick = (e) => {\r\n        if(e.target.className !== \"tab_close\") {\r\n            const { tabNum, onClick } = this.props;\r\n            onClick(tabNum);\r\n        }\r\n    }\r\n\r\n    closeTab = (tabNum) => {\r\n        this.props.closeTabItem(tabNum)\r\n    }\r\n    \r\n    render() {\r\n        // console.log(this.props)\r\n\r\n        const { onClick, props: { activeTab, label, tabNum, index } } = this;\r\n        let className = 'tab_list_item';\r\n    \r\n        if (activeTab === tabNum) {\r\n          className += ' tab_list_active';\r\n        }\r\n    \r\n        return (\r\n            <Draggable draggableId={tabNum} index={index}>\r\n                {(provided, snapshot) => (\r\n                    <li ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        className={className}\r\n                        onClick={onClick}\r\n                        // style={snapshot.isDragging ? {background: 'red'} : {background: 'white'}}\r\n                    >\r\n                        {label}\r\n                        <span onClick={() => this.closeTab(tabNum)} className=\"tab_close\">x</span>\r\n                    </li>\r\n                )}\r\n            </Draggable>\r\n        );\r\n    }\r\n}","import React from 'react'\r\nimport { Droppable } from 'react-beautiful-dnd';\r\n\r\nimport Tab from '../presentationcomponents/Tab'\r\n\r\n\r\nexport default class Tabs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n            activeTab: \"tab-1\",\r\n        };\r\n    }\r\n    \r\n    onClickTabItem = (tab) => {\r\n        this.setState({ activeTab: tab });\r\n        this.props.setActiveTab(tab)\r\n    }\r\n\r\n    closeTabItem = (tab) => {\r\n        this.props.closeTabItem(tab)\r\n    }\r\n\r\n    showChevronAtTab = () => {\r\n        if (window.screen.availWidth > 650) {\r\n            return 4;\r\n        } else {\r\n            return 2;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        // console.log(this)\r\n\r\n        const { onClickTabItem, props: { children, activeTab } } = this;\r\n        const showChevronAtTabNumber = this.showChevronAtTab()\r\n\r\n        return (\r\n            <div className=\"navigation__tab_overlay\">\r\n                <div className=\"navtabs\">\r\n                    {this.props.tabCount > showChevronAtTabNumber && \r\n                        this.props.firstTab !== this.props.activeTab\r\n                        ? <p className=\"chevron chevron_left\">&#x3c;</p>\r\n                        : <span className=\"chevron_placeholder\"></span>\r\n                    }\r\n                    \r\n                    <Droppable droppableId=\"droppable-nav\" direction=\"horizontal\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                // style={snapshot.isDraggingOver ? {background: 'red'} : {background: 'var(--nav-background)'}}\r\n                            >\r\n                                <ol className=\"tab_list\">\r\n                                    {children.map((child, index) => {\r\n                                    const { label, tabNum } = child.props;\r\n                        \r\n                                    return (\r\n                                        <Tab\r\n                                            activeTab={activeTab}\r\n                                            key={label}\r\n                                            label={label}\r\n                                            tabNum={tabNum}\r\n                                            index={index}\r\n                                            onClick={onClickTabItem}\r\n                                            closeTabItem={this.closeTabItem}\r\n                                        />\r\n                                    );\r\n                                    })}\r\n                                    \r\n                                </ol>\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    \r\n                    {this.props.tabCount > showChevronAtTabNumber && \r\n                        this.props.lastTab !== this.props.activeTab\r\n                        ? <p className=\"chevron chevron_right\">&#x3e;</p>\r\n                        : null\r\n                    }\r\n                    \r\n                    {this.props.tabCount < 10 \r\n                        ? <h1 className=\"add_tab_button\" onClick={this.props.addNewTab}>+</h1>\r\n                        : null\r\n                    }\r\n                </div>\r\n\r\n                <div className=\"navtab_content\">\r\n                    {children.map((child) => {\r\n                        if (child.props.tabNum !== activeTab) return undefined;\r\n                            return child.props.tabContent;\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react'\r\n\r\n\r\nexport default function TabElement (props) {\r\n    return (\r\n        <div key={props.tabNum} label={\"tab\" + props.tabNum}> \r\n            {props.tabContent}  \r\n        </div> \r\n    )\r\n}","export default function Modal (props) {\r\n    return (\r\n        <div style={{color: 'white'}} className=\"modal\">\r\n            <div className=\"modal__container\">\r\n                <div className=\"modal__container__header\">\r\n                    <h1>{props.headerText}</h1>\r\n                </div>\r\n                <div className=\"modal__container__body\">\r\n                    {props.modalBody}\r\n                </div>\r\n                <div className=\"modal__container__footer\">\r\n                    {props.confirmButton \r\n                        ? <button style={{marginRight: '15px'}} \r\n                            onClick={props.confirmButtonAction}>{props.confirmButtonText || 'Confirm'}</button>\r\n                        : null\r\n                    }\r\n                    <button onClick={props.closeButtonAction}>{props.closeButtonText || 'Close'}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\n\r\nimport Tabs from './Tabs'\r\nimport TabElement from '../presentationcomponents/TabElement'\r\nimport Modal from '../../sharedmodules/CommonModal'\r\n\r\n\r\nexport default class TabDisplayController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            tabList: [],\r\n            showModal: false,\r\n            deleteTab: undefined,\r\n            activeTab: \"tab-\" + 1,\r\n            tabCount: 3,\r\n            totalCount: 3,\r\n        }\r\n\r\n        this.tabState = {}\r\n        this.createTabs = this.createTabs.bind(this);\r\n        this.closeTabItem = this.closeTabItem.bind(this);\r\n        this.confirmCloseTabItem = this.confirmCloseTabItem.bind(this);\r\n        this.openModal = this.openModal.bind(this);\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.setActiveTab = this.setActiveTab.bind(this);\r\n        this.getTabCount = this.getTabCount.bind(this);\r\n        this.getTotalCount = this.getTotalCount.bind(this);\r\n        this.addNewTab = this.addNewTab.bind(this);\r\n\r\n        this.onDragEnd = this.onDragEnd.bind(this);\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.createTabs()\r\n    }\r\n    \r\n    getTabCount() {\r\n        return this.state.tabCount\r\n    }\r\n    \r\n    getTotalCount() {\r\n        return this.state.totalCount\r\n    }\r\n\r\n    addNewTab() {\r\n        let tabNum = this.getTotalCount() + 1\r\n\r\n        this.tabState[\"tab-\" + tabNum] = {\r\n            \"label\": \"tab\" + tabNum,\r\n            \"key\": tabNum - 1,\r\n            \"tabNum\": \"tab-\" + tabNum,\r\n            \"tabContent\": \"This is content. Tab  no is = \" + tabNum\r\n        }; \r\n\r\n        const { tabList } = this.state\r\n        let isTabListEmpty = tabList.length > 0 ? false : true \r\n\r\n        tabList.push(\r\n            <TabElement key={tabNum} \r\n                tabNum={\"tab-\" + tabNum} \r\n                tabContent={\"This is content. Tab  no is = \" + tabNum}\r\n                label={\"tab\" + tabNum}\r\n                index={tabNum}\r\n            />\r\n        )\r\n\r\n        const tabCount = tabList.length\r\n\r\n        if(isTabListEmpty) {\r\n            this.setState({\r\n                tabList, \r\n                tabCount, \r\n                totalCount: tabNum, \r\n                activeTab: \"tab-\" + tabNum\r\n            })\r\n        } else {\r\n            this.setState({\r\n                tabList, \r\n                tabCount, \r\n                totalCount: tabNum\r\n            })\r\n        }\r\n    }\r\n\r\n    createTabs(tabCount=this.state.tabCount) {\r\n        const tabList = []\r\n        const tabState = {}\r\n        \r\n        // if initializes data \r\n        if(Object.keys(this.tabState).length > 0) {\r\n            for(let tab in this.tabState) {\r\n                tabList.push(\r\n                    <TabElement key={this.tabState[tab]['key']} \r\n                        tabNum={this.tabState[tab]['tabNum']} \r\n                        tabContent={this.tabState[tab]['tabContent']}\r\n                        label={this.tabState[tab]['label']}\r\n                        index={this.tabState[tab]['key']+1}\r\n                    />\r\n                )\r\n            }\r\n\r\n        } else {\r\n            for(let i= 0; i< tabCount; i++) {\r\n                let label = \"tab\" + (i+1)\r\n    \r\n                tabState[\"tab-\" + (i+1)] = {\r\n                    \"label\": label,\r\n                    \"key\": i,\r\n                    \"tabNum\": \"tab-\" + (i+1),\r\n                    \"tabContent\": \"This is content. Tab  no is = \" + (i+1)\r\n                }; \r\n\r\n                tabList.push(\r\n                    <TabElement key={i} \r\n                        // tabNum={i+1} \r\n                        tabNum={\"tab-\" + (i+1)} \r\n                        tabContent={\"This is content. Tab  no is = \" + (i+1)}\r\n                        label={\"tab\" + (i+1)}\r\n                        index={i+1}\r\n                    />\r\n                )\r\n            }\r\n            this.tabState = tabState\r\n        }\r\n\r\n        this.setState({tabList})\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({showModal: true})\r\n    }\r\n\r\n    closeModal() {\r\n        this.setState({showModal: false})\r\n    }\r\n\r\n    confirmCloseTabItem(tabNum) {\r\n        this.setState({showModal: true, deleteTab: tabNum})\r\n    }\r\n    \r\n    closeTabItem() {\r\n        delete this.tabState[this.state.deleteTab]\r\n\r\n        // set active tab to 1st tab if active tab is deleted\r\n        if(this.state.deleteTab === this.state.activeTab) {\r\n            this.setState({\r\n                deleteTab: undefined, \r\n                showModal: false, \r\n                activeTab: Object.keys(this.tabState)[0], \r\n                tabCount: this.getTabCount() - 1\r\n            }, () => {\r\n                this.createTabs()\r\n            })\r\n        } else {\r\n            this.setState({\r\n                deleteTab: undefined, \r\n                showModal: false, \r\n                tabCount: this.getTabCount() - 1\r\n            }, () => {\r\n                this.createTabs()\r\n            })\r\n        }\r\n    }\r\n\r\n    setActiveTab(activeTab) {\r\n        this.setState({activeTab})\r\n    }\r\n\r\n    onDragEnd(result) {\r\n        const { destination, source, draggableId } = result\r\n        // console.log(result)\r\n        \r\n        /* return if drog and drop on the same position or\r\n         * destination outside of context\r\n         */\r\n        if(!destination) return\r\n        \r\n        let sourceKey = source.index\r\n        let destinationKey = destination.index\r\n\r\n        if(sourceKey === destinationKey) return\r\n        \r\n        // reorder by changing position of current tabState key array\r\n        let tempObj = Object.assign({}, this.tabState)\r\n        let dummy = {}\r\n        const existingOrder = Object.keys(tempObj)\r\n        const newOrder = Array.from(existingOrder)\r\n        newOrder.splice(sourceKey, 1)\r\n        newOrder.splice(destinationKey, 0, draggableId)\r\n\r\n        for(let key of newOrder) {\r\n            dummy[key] = tempObj[key]\r\n        }\r\n\r\n        this.tabState = Object.assign({}, dummy)\r\n        this.createTabs();\r\n    }\r\n\r\n    \r\n    render() {\r\n        let modalBodyText = \"Do you really want to delete this tab. The information will be lost forever!\"\r\n        let tabStateKeys = Object.keys(this.tabState)\r\n        \r\n        return (\r\n            <div className=\"navigation\">\r\n                <h1 className=\"navigation__header\">Demo Navigation</h1>\r\n\r\n                <DragDropContext onDragEnd={this.onDragEnd}>\r\n                    \r\n                    <Tabs activeTab={this.state.activeTab} \r\n                        closeTabItem={this.confirmCloseTabItem} \r\n                        setActiveTab={this.setActiveTab}\r\n                        addNewTab={this.addNewTab}\r\n                        tabCount={this.state.tabCount}\r\n                        firstTab={tabStateKeys[0]}\r\n                        lastTab={tabStateKeys[tabStateKeys.length - 1]}\r\n                    > \r\n                        {this.state.tabList}\r\n                    </Tabs> \r\n\r\n                </DragDropContext>\r\n                \r\n                {this.state.showModal \r\n                    ? <Modal headerText={\"Delete \" + this.state.deleteTab + \" ?\"}  \r\n                        modalBody={modalBodyText}\r\n                        confirmButton={true}\r\n                        confirmButtonText={\"Delete\"}\r\n                        confirmButtonAction={this.closeTabItem}\r\n                        closeButtonAction={this.closeModal}\r\n                    />\r\n                    : null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import TabDisplayController from './home/conditionalcomponenets/TabDisplayController'\nimport './App.css';\n\n\nfunction App() {\n    return (\n        <TabDisplayController />\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}